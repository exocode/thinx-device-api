version: 2
jobs:
  build:
    working_directory: ~/suculent/thinx-device-api
    parallelism: 1
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      REDIS_URL: redis://localhost:6379

    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    docker:
      - image: suculent/thinx_baseline:first
        auth:
          username: $DOCKER_USERNAME  # can specify string literal values
          password: $DOCKER_PASSWORD  # or project environment variable reference
    steps:

    # Use Remote Docker to run CouchDB and Transformer containers alongside
    - setup_remote_docker

    # Machine Setup
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
    - checkout

    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS

    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v1-dep-{{ .Branch }}-
        # Default branch if not
        - v1-dep-master-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v1-dep-

    # This is based on your 1.0 configuration file or project settings
    - run: apt-get update && apt-get install -y --fix-missing --no-install-recommends curl jq
    - run: cd spec/test_repositories && bash ./get-tests.sh
    - run: git submodule foreach --recursive 'git submodule sync' && git submodule update --init --recursive
    - run: npm install coveralls nyc eslint -g
    - run: npm install .
    - run: mkdir statistics
    # - run: gem install github_changelog_generator fails even with ruby 2.4
    # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    - run: if [ -z "${NODE_ENV:-}" ]; then export NODE_ENV=test; fi
    - run: export PATH="~/suculent/thinx-device-api/node_modules/.bin:$PATH"
    - run: echo -e "export RAILS_ENV=test\nexport RACK_ENV=test" >> $BASH_ENV
    - run: gem install bundler
    - run: 'bundler check --path=vendor/bundler || bundler install --path=vendor/bundler --jobs=4 --retry=3 '
    # Save dependency cache
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        paths:
        # This is a broad list of cache paths to include many possible development environments
        # You can probably delete some of these entries
        - vendor/bundle
        - vendor/bundler
        - ~/virtualenvs
        - ~/.m2
        - ~/.ivy2
        - ~/.bundle
        - ~/.bundler
        - ~/.go_workspace
        - ~/.gradle
        - ~/.cache/bower
        - ./node_modules

    - run: bash ./scripts/00-init_db_design.sh

    # Sonarcloud Integration (requires JAVA)
    # - run: wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
    # - run: unzip sonar-scanner*.zip
    # - run: which java
    # - run: alias sonar-scanner="$(pwd)/sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner" && which sonar-scanner && bash ./99-sonar.sh

    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    - run: mkdir -p $CIRCLE_TEST_REPORTS/reports

    - run:
        name: Install ESLint and project
        command: |
            npm install -g eslint
            npm install .
            cp ./conf/config-test.json ./conf/config.json

    # - run: eslint ./lib/ --format junit --output-file $CIRCLE_TEST_REPORTS/reports/eslint.xml

    - run:
        name: Install Docker client
        command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

    - run:
        name: Run CouchDB
        command: docker run -d --rm -p 5984:5984 -e COUCHDB_ADMIN=rtmtest -e COUCHDB_PASS=rtmtest -e NODENAME=couchdb --name="couchdb" suculent/thinx-couchdb-master

    - run:
        name: Run Redis
        command: docker run -d --rm -p 6379:6379 -e REDIS_PASSWORD=m7t0r3d1sn3m --name="thinx-redis" suculent/redis-slave:latest

    - run:
        name: Run Mosquitto
        command: docker run -d --rm -p 1883:1883 --name="mosquitto" suculent/thinx-message-broker

    - run:
        name: Check running Docker containers
        command: |
            docker ps
            docker network ls
            docker network inspect bridge

        # In cases where thinx-device-api runs as node.js app against containers in CircleCI, IPs depend on run order
    - run: echo "172.17.0.2 couchdb" >> /etc/hosts
    - run: echo "172.17.0.3 thinx-redis" >> /etc/hosts
    - run: echo "172.17.0.4 mosquitto" >> /etc/hosts

    - run:
        name: NPM nyc jasmine
        command: npm run test

    - run: mkdir -p $CIRCLE_TEST_REPORTS/rspec
    - run:
        command: bundler exec rspec --format RspecJunitFormatter --out $CIRCLE_TEST_REPORTS/rspec/rspec.xml --format progress spec
        environment:
          RAILS_ENV: test
          RACK_ENV: test

    - run: bash ./scripts/01-analyze.sh
    - run: bash ./scripts/03-test.sh

    # Deployment
    # Your existing circle.yml file contains deployment steps.
    # The config translation tool does not support translating deployment steps
    # since deployment in CircleCI 2.0 are better handled through workflows.
    # See the documentation for more information https://circleci.com/docs/2.0/workflows/
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
