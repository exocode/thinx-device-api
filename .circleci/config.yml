version: 2
jobs:

  build:

    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    docker:
      - image: suculent/thinx_baseline:first
        auth:
          username: $DOCKER_USERNAME  # can specify string literal values
          password: $DOCKER_PASSWORD  # or project environment variable reference

    working_directory: ~/suculent/thinx-device-api

    parallelism: 1

    shell: /bin/bash --login

    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      REDIS_URL: redis://localhost:6379

    steps:
    - setup_remote_docker
    - checkout

    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS

    # Restore the dependency cache
    - restore_cache:
        keys:
          # This branch if available
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

    # This is based on your 1.0 configuration file or project settings
    - run: apt-get update && apt-get install -y --fix-missing --no-install-recommends curl jq mosquitto
    - run: cd spec/test_repositories && bash ./get-tests.sh
    - run: git submodule foreach --recursive 'git submodule sync' && git submodule update --init --recursive
    - run: npm install coveralls nyc eslint -g
    - run: curl https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
    - run: export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    - run: export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && nvm install 10.16.0 && nvm use 10.16.0 && rm -rf ./package-lock.json && rm -rf ./node_modules && npm install .
    - run: mkdir statistics

    - save_cache:
        paths:
          - node_modules
        key: v1-dependencies-{{ checksum "package.json" }}

    - run:
        name: Install Docker client
        command: |
          set -x
          VER="17.03.0-ce"
          curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
          tar -xz -C /tmp -f /tmp/docker-$VER.tgz
          export PATH=$PATH:/tmp/docker

    # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    - run: if [ -z "${NODE_ENV:-}" ]; then export NODE_ENV=test; fi
    - run: export PATH="~/suculent/thinx-device-api/node_modules/.bin:$PATH"
    - run: echo -e "export RAILS_ENV=test\nexport RACK_ENV=test" >> $BASH_ENV
    - run: gem install bundler
    - run: bundler check --path=vendor/bundler || bundler install --path=vendor/bundler --jobs=4 --retry=3

    # Copy the configuration folder from docker-ignored folder to virtual mount
    - run: mkdir -p /mnt/data && cp -R ./conf /mnt/data
    - run: mkdir -p /mnt/data/ssh-keys
    - run: mkdir -p /mnt/data/mosquitto/auth
    - run: mkdir -p /mnt/data/mosquitto/config
    - run: mkdir -p /mnt/data/mosquitto/data
    - run: mkdir -p /mnt/data/mosquitto/log
    - run: mkdir -p /mnt/data/mosquitto/ssl
    - run: mkdir -p /mnt/data/couchdb
    - run: mkdir -p /mnt/data/deploy
    - run: mkdir -p /mnt/data/data
    - run: mkdir -p /mnt/data/redis
    - run: mkdir -p /mnt/data/repos
    - run: mkdir -p /mnt/data/ssl

    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    - run: mkdir -p $CIRCLE_TEST_REPORTS/reports

    # This is a big thing... creating test mount with all sample data...

    - run:
        name: Init filesystem
        command: |
            mkdir -p /mnt/data/
        # curl sample data zip from somewhere and unpack, maybe provide base filesystem zip as kind of a build...

    - run:
        name: Install ESLint and project
        command: |
            npm install -g eslint
            npm install .
            cp ./conf/config-test.json ./conf/config.json

    # - run: eslint ./lib/ --format junit --output-file $CIRCLE_TEST_REPORTS/reports/eslint.xml

    - run:
        name: Install Docker client
        command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

    - run:
        name: Docker Compose
        command: |
          cp .env.dist .env
          export PATH=$PATH:/tmp/docker
          export ENVIRONMENT=test
          docker-compose up -d --build && docker-compose logs -f

    - run:
        name: Check running Docker containers
        command: |
            docker ps
            docker network ls
            docker network inspect bridge

    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
